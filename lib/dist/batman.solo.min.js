(function() {
    var $block, $event, $eventOneShot, $findName, $get, $mixin, $redirect, $route, $typeOf, $undef, $unmixin, Batman, Binding, RenderContext, Validators, buntUndefined, camelize_rx, capitalize_rx, container, escapeRegExp, filters, helpers, k, mixins, namedOrSplat, namedParam, queryParam, splatParam, underscore_rx1, underscore_rx2, _Batman, _class, _fn, _i, _j, _len, _len2, _objectToString, _ref, _ref2, _stateMachine_setState, __slice = Array, __hasProp = Object, __extends = function(a, b) {
        function d() {
            this = a;
        }
        for (var c in b) __hasProp(b, c) && (a[c] = b[c]);
        d = b, a = new d, a = b;
        return a;
    }, __bind = function(a, b) {
        return function() {
            return a(b, arguments);
        };
    }, __indexOf = Array || function(a) {
        for (var b = 0, c = this; b < c; b++) if (this[b] === a) return b;
        return -1;
    };
    Batman = function() {
        var a;
        a = 1 <= arguments ? __slice(arguments, 0) : [];
        return function(a, b, c) {
            c = a;
            var d = new c, e = a(d, b);
            return typeof e == "object" ? e : d;
        }(Batman, a, function() {});
    }, Batman = $typeOf = function(a) {
        return _objectToString(a)(8, -1);
    }, _objectToString = Object, Batman = $undef = function(a) {
        return typeof a == "undefined";
    }, Batman = $mixin = function() {
        var a, b, c, d, e, f, g, h;
        e = arguments[0], d = 2 <= arguments ? __slice(arguments, 1) : [], a = typeof e == "function";
        for (g = 0, h = d; g < h; g++) {
            c = d[g];
            if ($typeOf(c) !== "Object") continue;
            for (b in c) {
                if (!__hasProp(c, b)) continue;
                f = c[b];
                if (b === "initialize" || b === "uninitialize" || b === "prototype") continue;
                a ? e(b, f) : e[b] = f;
            }
        }
        return e;
    }, Batman = $unmixin = function() {
        var a, b, c, d, e, f;
        a = arguments[0], d = 2 <= arguments ? __slice(arguments, 1) : [];
        for (e = 0, f = d; e < f; e++) {
            c = d[e];
            for (b in c) {
                if (b === "initialize" || b === "uninitialize") continue;
                delete a[b];
            }
            typeof c == "function" && c(a);
        }
        return a;
    }, Batman = $block = function(a, b) {
        var c, d;
        b != null ? c = a : b = a;
        return d = function() {
            var a, d, e;
            a = 1 <= arguments ? __slice(arguments, 0) : [], d = this, e = function(c) {
                a(c);
                return b(d, a);
            };
            return typeof a[a - 1] == "function" || c && a >= c ? e(a()) : e;
        };
    }, Batman = $findName = function(a, b) {
        var c, d;
        if (!a) for (c in b) {
            d = b[c];
            if (d === a) {
                a = c;
                break;
            }
        }
        return a;
    }, Batman = function() {
        function a(a, b) {
            this = a, this = b;
        }
        a = {
            get: function(a) {
                return this[a];
            },
            set: function(a, b) {
                return this[a] = b;
            },
            unset: function(a) {
                return delete this[a];
            }
        }, a = null, a["for"] = function(a, b) {
            var c, d;
            if (a) {
                Batman(a), c = (d = a) || (d = new Batman);
                return c(b) || c(b, new this(a, b));
            }
            return new this(a, b);
        }, a = !0, a = function() {
            var a, b, c, d;
            a = (c = this) != null ? c("keyAccessors") : void 0;
            return a && (b = a(this)) ? b : ((d = this) != null ? d("defaultAccessor") : void 0) || Batman;
        }, a = function() {
            var a;
            if (a = Batman) return a(this);
        }, a = function() {
            var a;
            this();
            return (a = this()) != null ? a(this, this) : void 0;
        }, a = function(a) {
            var b;
            return (b = this()) != null ? b(this, this, a) : void 0;
        }, a = function() {
            var a;
            return (a = this()) != null ? a(this, this) : void 0;
        }, a = function(a) {
            return this === a && this === a && this === a;
        };
        return a;
    }(), Batman = function() {
        function a(b, c) {
            a(this, arguments), this = new Batman, this() && this(), this = 0;
        }
        __extends(a, Batman), a = function(b) {
            this(), a(this, arguments), this();
            return b;
        }, a = function() {
            this(), a(this, arguments), this();
        }, a = function() {
            if (this) return this(function(a) {
                return a = a();
            });
        }, a = function() {
            if (this) return this(function(a) {
                if (typeof a == "function" ? a() : void 0) return a(a(), a);
            });
        }, a = function() {
            var a, b, c, d;
            c = 2 <= arguments ? __slice(arguments, 0, d = arguments - 1) : (d = 0, []), a = arguments[d++], c = c[0] === !0, b = this(), this(a), this(), c && a(this, b, b);
            return this;
        }, a = function() {
            if (this > 0) return !0;
            return this != null ? this()(__bind(function(a) {
                var b, c;
                return (typeof a == "function" ? (b = a(this)) != null ? (c = b) != null ? c : void 0 : void 0 : void 0) > 0;
            }, this)) : !1;
        }, a = function() {
            return this++;
        }, a = function() {
            if (this > 0) return this--;
        }, a = function() {
            return this <= 0;
        }, a = function() {
            var a, b, c, d;
            a = 1 <= arguments ? __slice(arguments, 0) : [];
            if (!!this()) {
                c = this, b = this, d = [ this ](this(function(a) {
                    return typeof a == "function" ? a(c) : void 0;
                }))(function(a, b) {
                    return a(b);
                }), d(function(c) {
                    return c != null ? c(b, a) : void 0;
                });
                return this();
            }
        }, a = function(a) {
            a ? this(a) : this = new Batman;
            if (!this()) return this();
        }, a = function() {
            Batman = new Batman, this(), this && this(__bind(function(a) {
                var b;
                if (!Batman(a)) return (b = a) != null ? b(this) : void 0;
            }, this)), this = Batman, this(__bind(function(a) {
                a || (a = new Batman);
                return a(this);
            }, this));
            return delete Batman;
        }, a = function() {
            this(__bind(function(a) {
                return a(this);
            }, this));
            return this = new Batman;
        };
        return a;
    }(), Batman = function() {
        function a(b, c) {
            $typeOf(c) === "String" ? (this = c("."), this = this) : (this = [ c ], this = 1), a(this, arguments);
        }
        __extends(a, Batman), a = function(a, b) {
            var c, d, e, f, g;
            c = this, g = this(0, a);
            for (e = 0, f = g; e < f; e++) {
                d = g[e];
                if (c == null || !(c = Batman["for"](c, d)())) return;
            }
            return Batman["for"](c, this(a, b)("."));
        }, a = function() {
            return this(-1);
        }, a = function() {
            var b;
            this();
            return this === 1 ? a(this, arguments) : (b = this()) != null ? b() : void 0;
        }, a = function(b) {
            var c;
            return this === 1 ? a(this, arguments) : (c = this()) != null ? c(b) : void 0;
        }, a = function() {
            var b;
            return this === 1 ? a(this, arguments) : (b = this()) != null ? b() : void 0;
        };
        return a;
    }(), Batman = {
        isObservable: !0,
        property: function(a) {
            Batman(this);
            return Batman["for"](this, a);
        },
        get: function(a) {
            if (!$undef(a)) return this(a)();
        },
        set: function(a, b) {
            if (!$undef(a)) return this(a)(b);
        },
        unset: function(a) {
            if (!$undef(a)) return this(a)();
        },
        forget: function(a, b) {
            a ? this(a)(b) : this(function(a, b) {
                return b();
            });
            return this;
        },
        allowed: function(a) {
            return this(a)();
        }
    }, _ref = [ "observe", "prevent", "allow", "fire" ], _fn = function(a) {
        return Batman[a] = function() {
            var b, c, d;
            c = arguments[0], b = 2 <= arguments ? __slice(arguments, 1) : [], (d = this(c))[a](d, b);
            return this;
        };
    };
    for (_i = 0, _len = _ref; _i < _len; _i++) k = _ref[_i], _fn(k);
    $get = Batman = function(a, b) {
        return a ? a(b) : Batman(a, b);
    }, Batman = {
        event: $block(function(a, b, c) {
            var d;
            !c && !$undef(b) && (c = b, b = null), !c && $typeOf(a) !== "String" && (c = a, a = null), d = function(b) {
                var e, g, h, i, j, k, l;
                if (!this) throw "EventEmitter requires Observable";
                Batman(this), a || (a = $findName(d, this)), g = (k = this) != null ? k[a] : void 0;
                if (typeof b != "function") {
                    if (this(a)) {
                        if (d && g) return !1;
                        i = c != null ? c(this, arguments) : void 0, i !== !1 && (d = $undef(i) ? arguments === 0 ? [] : Array(arguments) : (l = [ i ])(l, arguments), e = Array(d), e(a), this(this, e), d && (h = (j = this) || (j = {}), h[a] = !0));
                        return i;
                    }
                    return !1;
                }
                this(a, b);
                if (d && g) return b(this, d);
            }, b && (d = d(b)), a != null && (this[a] = d);
            return $mixin(d, {
                isEvent: !0,
                action: c,
                isOneShot: this
            });
        }),
        eventOneShot: function(a) {
            return $mixin(Batman(this, arguments), {
                isOneShot: !0
            });
        }
    }, Batman = $event = function(a) {
        var b;
        b = new Batman;
        return b("_event", b, a);
    }, Batman = $eventOneShot = function(a) {
        var b;
        b = new Batman;
        return b("_event", b, a);
    }, Batman = {
        initialize: function() {
            Batman(this);
            if (!this) {
                this = new Batman;
                return this("state", {
                    get: function() {
                        return this();
                    },
                    set: function(a, b) {
                        return _stateMachine_setState(this, b);
                    }
                });
            }
        },
        state: function(a, b) {
            var c;
            Batman(this);
            if (!a) return this("state");
            if (!this) throw "StateMachine requires EventEmitter";
            c = this[a] || this(a, function() {
                _stateMachine_setState(this, a);
                return !1;
            }), typeof b == "function" && c(this, b);
            return c;
        },
        transition: function(a, b, c) {
            var d, e, f;
            Batman(this), this(a), this(b), e = "" + a + "->" + b, f = this, d = f(e) || f(e, $event(function() {})), c && d(c);
            return d;
        }
    }, _stateMachine_setState = function(a) {
        var b, c, d, e, f, g, h, i;
        Batman(this);
        if (this) {
            ((e = this) || (e = []))(a);
            return !1;
        }
        this = !0, d = this(), this = a;
        if (a && d) {
            c = "" + d + "->" + a, h = this(function(a) {
                var b, d;
                return (b = a) != null ? (d = b("states")) != null ? d(c) : void 0 : void 0;
            });
            for (f = 0, g = h; f < g; f++) b = h[f], b && b(a, d);
        }
        a && this(a, a, d), this = !1, ((i = this) != null ? i : void 0) && this[this()]();
        return a;
    }, Batman = function(a) {
        return a != null ? a(a) : a = new _Batman(a);
    }, Batman = _Batman = function() {
        function a() {
            var a, b;
            b = arguments[0], a = 2 <= arguments ? __slice(arguments, 1) : [], this = b, a > 0 && $mixin(null, [ this ](__slice(a)));
        }
        a = function(b) {
            if (b !== this) return b = new a(b);
        }, a = function(a) {
            var b;
            b = this(a);
            switch (b) {
              case 0:
                return;
              case 1:
                return b[0];
              default:
                b[0] != null ? b = b(function(a, b) {
                    return a(b);
                }) : b[0] != null && (b = b(function(a, b) {
                    return a(b);
                }));
                return b;
            }
        }, a = function(a) {
            var b;
            b = this(a);
            return b[0];
        }, a = function(a) {
            var b, c, d;
            typeof a == "function" ? b = a : b = function(b) {
                var c;
                return (c = b) != null ? c[a] : void 0;
            }, c = this(b), (d = b(this)) && c(d);
            return c;
        }, a = function(a) {
            var b, c, d, e, f, g;
            a == null && (a = function(a) {
                return a;
            }), e = [], c = !!this, d = c ? (g = this) != null ? g : void 0 : (b = this) === this ? b : b, d != null && (f = a(d), f != null && e(f), d != null && (e = e(d(a))));
            return e;
        }, a = function(a, b) {
            return this[a] = b;
        };
        return a;
    }(), Batman = function() {
        function a() {
            var a;
            a = 1 <= arguments ? __slice(arguments, 0) : [], this = new _Batman(this), this(this, a);
        }
        a = function(a) {
            if (a !== !1) return container[this] = this;
        }, a = function() {
            return $mixin(null, [ this ](__slice(arguments)));
        }, a = function() {
            return this(this, arguments);
        }, a = a, a = function() {
            var a, b, c, d, e, f, g, h, i, j, k;
            c = 2 <= arguments ? __slice(arguments, 0, g = arguments - 1) : (g = 0, []), a = arguments[g++], Batman(this);
            if (c === 0) {
                if (a || a) return this = a;
                (e = this) || (e = new Batman), j = [];
                for (b in a) d = a[b], this(b, {
                    get: d,
                    set: d
                }), j(this[b] = d);
                return j;
            }
            (f = this) || (f = new Batman), k = [];
            for (h = 0, i = c; h < i; h++) b = c[h], k(this(b, a));
            return k;
        }, a = function() {
            return this(this, arguments);
        }, a = a, a(Batman, Batman), a(Batman, Batman), a = function() {
            return this(this, arguments);
        }, a = function(a) {
            a == null && (a = !0), Batman(this), Batman(this), this = function() {
                return Batman(this, arguments);
            }, this = function() {
                return this(this, arguments);
            }, a && (this = this), this = function() {
                return Batman(this, arguments);
            }, this = function() {
                return this(this, arguments);
            };
            if (a) return this = this;
        };
        return a;
    }(), Batman = function() {
        function a() {
            this = {}, this = 0;
        }
        a = function(a) {
            return !$undef(this(a));
        }, a = function(a) {
            var b, c, d, e, f, g;
            if (!$undef(a)) if (b = this[a]) for (e = 0, f = b; e < f; e++) {
                g = b[e], c = g[0], d = g[1];
                if (this(c, a)) return d;
            }
        }, a = function(a, b) {
            var c, d, e, f, g, h;
            if (!$undef(a)) {
                if ($undef(b)) return this(a);
                d = (f = this)[a] || (f[a] = []);
                for (g = 0, h = d; g < h; g++) {
                    c = d[g];
                    if (this(c[0], a)) {
                        e = c;
                        break;
                    }
                }
                e || (e = [ a ], d(e), this++);
                return e[1] = b;
            }
        }, a = function(a) {
            var b, c, d, e, f, g;
            if (c = this[a]) for (b = 0, f = c; b < f; b++) {
                g = c[b], d = g[0], e = g[1];
                if (this(d, a)) {
                    c(b, 1), this--;
                    return;
                }
            }
        }, a = function(a, b) {
            if ($undef(a) || $undef(b)) return !1;
            return typeof a == "function" ? a(b) : typeof b == "function" ? b(a) : a === b;
        }, a = function(a) {
            var b, c, d, e, f, g;
            f = this, g = [];
            for (b in f) e = f[b], g(function() {
                var b, f, g, h;
                h = [];
                for (b = 0, f = e; b < f; b++) g = e[b], c = g[0], d = g[1], h(a(c, d));
                return h;
            }());
            return g;
        }, a = function() {
            var a;
            a = [], this(function(b) {
                return a(b);
            });
            return a;
        }, a = function() {
            this = {};
            return this = 0;
        }, a = function() {
            return this === 0;
        }, a = function() {
            var a, b, c, d, e;
            c = 1 <= arguments ? __slice(arguments, 0) : [], b = new this, c(this);
            for (d = 0, e = c; d < e; d++) a = c[d], a(function(a, c) {
                return b(a, c);
            });
            return b;
        };
        return a;
    }(), Batman = function() {
        function e() {
            Batman(this, arguments), e(this, arguments);
        }
        var a, b, c, d;
        __extends(e, Batman), e({
            get: Batman,
            set: Batman,
            unset: Batman
        }), e("isEmpty", {
            get: function() {
                return this();
            }
        }), d = [ "hasKey", "equality", "each", "keys", "merge", "clear", "isEmpty" ];
        for (b = 0, c = d; b < c; b++) a = d[b], e[a] = Batman[a];
        return e;
    }(), Batman = function() {
        function a() {
            this = new Batman, this = 0, arguments > 0 && this(this, arguments);
        }
        a = function(a) {
            return this(a);
        }, a = function() {
            var a, b, c, d;
            b = 1 <= arguments ? __slice(arguments, 0) : [];
            for (c = 0, d = b; c < d; c++) a = b[c], this(a) || (this(a, !0), this++);
            return b;
        }, a = function() {
            var a, b, c, d, e;
            b = 1 <= arguments ? __slice(arguments, 0) : [], c = [];
            for (d = 0, e = b; d < e; d++) a = b[d], this(a) && (this(a), c(a), this--);
            return c;
        }, a = function(a) {
            return this(function(b, c) {
                return a(b);
            });
        }, a = function() {
            return this === 0;
        }, a = function() {
            return this(this());
        }, a = function() {
            return this();
        }, a = function() {
            var a, b, c, d, e;
            b = 1 <= arguments ? __slice(arguments, 0) : [], a = new this, b(this);
            for (d = 0, e = b; d < e; d++) c = b[d], c(function(b) {
                return a(b);
            });
            return a;
        };
        return a;
    }(), Batman = function() {
        function h() {
            h(this, arguments), _class(this, arguments);
        }
        var a, b, c, d, e, f, g;
        __extends(h, Batman), _class = Batman, f = [ "add", "remove" ];
        for (b = 0, d = f; b < d; b++) a = f[b], h[a] = h(Batman[a]);
        g = [ "has", "each", "isEmpty", "toArray", "clear", "merge" ];
        for (c = 0, e = g; c < e; c++) a = g[c], h[a] = Batman[a];
        h("isEmpty", {
            get: function() {
                return this();
            }
        });
        return h;
    }(), Batman = function() {
        function a(b) {
            a(this, arguments), this = {}, this(b);
        }
        __extends(a, Batman), a = a(function() {
            var a;
            a = Batman(this, arguments), this();
            return a;
        }), a = a(function() {
            var a;
            a = Batman(this, arguments), this();
            return a;
        }), a = function(a) {
            this(a);
            return this = a;
        }, a = function(a) {
            this[a] = null, delete this[a];
            return a;
        }, a = function(a) {
            var b, c, d, e, f;
            e = toArray(), f = [];
            for (c = 0, d = e; c < d; c++) b = e[c], f(a(b));
            return f;
        }, a = function() {
            var b, c;
            return b = (c = this[this]) != null ? c : {
                ary: a(this, arguments)
            };
        }, a = function(a) {
            var b, c, d, e, f;
            if (a) {
                e = a(" "), c = e[0], d = e[1], b = Batman(this);
                return this[a] = b(function(a, b) {
                    var e, f, g, h, i;
                    e = (g = Batman(a, c)()) != null ? g() : void 0, f = (h = Batman(b, c)()) != null ? h() : void 0, (d != null ? d() : void 0) === "desc" && (i = [ f, e ], e = i[0], f = i[1]);
                    return e < f ? -1 : e > f ? 1 : 0;
                });
            }
            f = [];
            for (a in this) f(this(a));
            return f;
        };
        return a;
    }(), Batman = function() {
        function a() {
            a(this, arguments);
        }
        __extends(a, Batman), a = "", a = "", a = "get", a = null, a("url", function() {
            return this = setTimeout(__bind(function() {
                return this();
            }, this), 0);
        }), a = a(function() {}), a = a(function() {}), a = a(function() {}), a = a(function() {}), a = function() {
            throw "Please source a dependency file for a request implementation";
        }, a = function() {
            if (this) return clearTimeout(this);
        };
        return a;
    }(), Batman = function() {
        function a() {
            a(this, arguments);
        }
        __extends(a, Batman), a = "", a = function() {
            var a, b, c, d, e, f;
            d = arguments[0], c = 2 <= arguments ? __slice(arguments, 1) : [], a = this + d;
            for (e = 0, f = c; e < f; e++) b = c[e], this("run"), d = a + "/" + b + ".coffee", new Batman({
                url: d,
                type: "html",
                success: __bind(function(a) {
                    CoffeeScript(a), this("run");
                    return this();
                }, this)
            });
            return this;
        }, a = function() {
            var a;
            a = 1 <= arguments ? __slice(arguments, 0) : [];
            return this(this, [ "controllers" ](__slice(a)));
        }, a = function() {
            var a;
            a = 1 <= arguments ? __slice(arguments, 0) : [];
            return this(this, [ "models" ](__slice(a)));
        }, a = function() {
            var a;
            a = 1 <= arguments ? __slice(arguments, 0) : [];
            return this(this, [ "views" ](__slice(a)));
        }, a = void 0, a = a(function() {
            if (this) return !1;
            Batman = this, $undef(this) && this("layout", new Batman({
                node: document,
                contexts: [ this ]
            })), this();
            return this = !0;
        });
        return a;
    }(), namedParam = /:([\w\d]+)/g, splatParam = /\*([\w\d]+)/g, queryParam = "(?:\\?.+)?", namedOrSplat = /[:|\*]([\w\d]+)/g, escapeRegExp = /[-[\]{}()+?.,\\^$|#\s]/g, Batman = {
        isRoute: !0,
        pattern: null,
        regexp: null,
        namedArguments: null,
        action: null,
        context: null,
        fire: function(a, b) {
            var c, d, e, f;
            c = this;
            if ($typeOf(c) === "String" && (f = c("#")) !== -1) {
                e = helpers(c(0, f) + "Controller"), d = Batman[e], b = d;
                if (b != null ? b : void 0) b = b();
                c = b[c(f + 1)];
            }
            if (c) return c(b || this, a);
        },
        toString: function() {
            return "route: " + this;
        }
    }, $mixin(Batman, {
        HASH_PATTERN: "#!",
        _routes: [],
        route: $block(2, function(a, b) {
            var c, d, e, f, g;
            d = function(b) {
                var c, e, f, g, h;
                $typeOf(d) === "String" && (c = d("#"), f = Batman[helpers(c[0]) + "Controller"], f && (d = f, d = f[c[1]])), e = d || this, e && e && (e = e()), a = d;
                if (b && !b) for (g in b) h = b[g], a = a(new RegExp("[:|*]" + g), h);
                if (b && !b || !b) Batman = a, window = Batman + a;
                return e && e ? e(d, b) : d(arguments, e);
            }, e = a(escapeRegExp, "\\$&"), g = new RegExp("^" + e(namedParam, "([^/]*)")(splatParam, "(.*?)") + queryParam + "$"), f = [];
            while ((c = namedOrSplat(e)) != null) c[1] && f(c[1]);
            $mixin(d, Batman, {
                pattern: e,
                regexp: g,
                namedArguments: f,
                action: b,
                context: this
            }), Batman(d);
            return d;
        }),
        redirect: function(a) {
            var b;
            b = (a != null ? a : void 0) ? a : a;
            return window = "" + Batman + b;
        }
    }), Batman = Batman = $route = Batman, Batman = Batman = $redirect = Batman, $mixin(Batman, {
        startRouting: function() {
            var a, b;
            if (!$undef(window)) {
                b = __bind(function() {
                    var a;
                    a = window(Batman, "");
                    if (a !== this) {
                        this = a;
                        return this(a);
                    }
                }, this), window || (window = "" + Batman + "/"), setTimeout(b, 0);
                if ("onhashchange" in window) {
                    this = b;
                    return window("hashchange", b);
                }
                a = window;
                return this = setInterval(b, 100);
            }
        },
        stopRouting: function() {
            if (this != null) {
                if ("onhashchange" in window) {
                    window("hashchange", this);
                    return this = null;
                }
                return this = clearInterval(this);
            }
        },
        _dispatch: function(a) {
            var b, c;
            c = this(a);
            if (!c) a === "/404" ? Batman[404]() : $redirect("/404"); else {
                b = this(a, c);
                return c(b);
            }
        },
        _matchRoute: function(a) {
            var b, c, d, e;
            e = Batman;
            for (c = 0, d = e; c < d; c++) {
                b = e[c];
                if (b(a)) return b;
            }
            return null;
        },
        _extractParams: function(a, b) {
            var c, d, e, f, g, h, i, j, l, m, n, o, p;
            n = a("?"), a = n[0], g = n[1], c = b(a)(1), f = {
                url: a
            };
            for (d = 0, l = c; d < l; d++) e = c[d], f[b[d]] = e;
            if (g != null) {
                o = g("&");
                for (j = 0, m = o; j < m; j++) h = o[j], p = h("="), k = p[0], i = p[1], f[k] = i;
            }
            return f;
        },
        root: function(a) {
            return $route("/", a);
        },
        "404": function() {
            var a;
            return a = new Batman({
                html: "<h1>Page could not be found</h1>",
                contentFor: "main"
            });
        }
    }), Batman = function() {
        function a() {
            a(this, arguments);
        }
        __extends(a, Batman), a = function() {
            this || (this = new this);
            return this;
        }, a = function(a) {
            var b;
            b = this || (this = []);
            return b(a);
        }, a = function(a) {
            var b;
            b = __bind(function() {
                this && (this = this("/" + a, this)), this && (this = this("/" + a + "/new", this)), this && (this = this("/" + a + "/:id", this));
                if (this) return this = this("/" + a + "/:id/edit", this);
            }, this);
            return setTimeout(b, 0);
        }, a = function() {
            var a, b, c, d, e, f, g, h;
            f = arguments[0], d = 2 <= arguments ? __slice(arguments, 1) : [], c = $findName(f, this), this = !1, this = c, b = this;
            if (b) for (g = 0, h = b; g < h; g++) a = b[g], a(this);
            e = f(d, this), !this && e !== !1 && this(), delete this;
            return delete this;
        }, a = function(a) {
            this = !0;
            return $redirect(a);
        }, a = function(a) {
            var b;
            a == null && (a = {}), this = !0, a || (a = helpers(this("Controller", "")) + "/" + this + ".html", a = new Batman(a));
            if (b = a) {
                b || (b = this);
                return b(function() {
                    return Batman("main", b("node"));
                });
            }
        };
        return a;
    }(), Batman = function() {
        function e(a) {
            var b;
            a == null && (a = {}), this = __bind(this, this), this = new Batman, this = new Batman, e(this, arguments), this() || this(), b = $typeOf(a) === "Object" ? a : a, b != null && this(b);
        }
        var a, b, c, d;
        __extends(e, Batman), e = function() {
            var a, b, c, d, e, f;
            b = 1 <= arguments ? __slice(arguments, 0) : [], Batman(this), c = (d = this) || (d = []);
            for (e = 0, f = b; e < f; e++) a = b[e], c(a ? a : new a(this));
            return this;
        }, e("all", {
            get: function() {
                this || this();
                return this;
            }
        }), e("first", {
            get: function() {
                return this = this("all")[0];
            }
        }), e("last", {
            get: function() {
                return this = this("all")[this - 1];
            }
        }), e = function(a) {
            var b, c, d, e;
            a = "" + a, e = this("all")();
            for (c = 0, d = e; c < d; c++) {
                b = e[c];
                if (b() === a) return b;
            }
            b = new this(a), setTimeout(function() {
                return b();
            }, 0);
            return b;
        }, e = "id", e = function(a) {
            var b, c, d, e, f, g;
            d = this, c = (typeof d == "function" ? d() : void 0) || d || "id", arguments > 0 && (a = "" + a, Batman(d), f = (g = d) || (g = {}), e = f[a], b = d("all"), e && b(e), f[a] = this, b(this));
            return this[c];
        }, e = e(function() {
            return this("all")();
        }), e = e(function() {}), e = function(a) {
            var b, c, d, e, f, g, h, i, j;
            this || (this = new Batman), this(), b = __bind(function() {
                a != null && a(this);
                return this();
            }, this), c = this("storage"), d = !c;
            for (g = 0, i = c; g < i; g++) {
                f = c[g], d = d || !f;
                for (h = 0, j = f; h < j; h++) e = f[h], e(this, b);
            }
            if (d) return b();
        }, e = function() {
            var a, b, c, d, e, f, g, h, i, j, k;
            e = 2 <= arguments ? __slice(arguments, 0, h = arguments - 1) : (h = 0, []), c = arguments[h++], Batman(this), (f = this) || (f = new Batman), (g = this) || (g = new Batman);
            switch ($typeOf(c)) {
              case "String":
                e(c);
                break;
              case "Function":
                b = c;
                break;
              default:
                b = c, a = c;
            }
            k = [];
            for (i = 0, j = e; i < j; i++) d = e[i], this(d, b || this), k(this(d, a || this));
            return k;
        }, e = e = function(a) {
            return a;
        }, e = function() {
            var a, b, c, d, e, f, g, h, i, j, k, l;
            a = 2 <= arguments ? __slice(arguments, 0, i = arguments - 1) : (i = 0, []), e = arguments[i++], Batman(this), g = (h = this) || (h = []);
            if (typeof e == "function") return g({
                keys: a,
                callback: e
            });
            d = e, l = [];
            for (j = 0, k = Validators; j < k; j++) f = Validators[j], l(function() {
                var e, h;
                if (c = f(d)) {
                    for (e = 0, h = c; e < h; e++) b = c[e], delete d[b];
                    return g({
                        keys: a,
                        validator: new f(c)
                    });
                }
            }());
            return l;
        }, e(Batman), d = [ "empty", "dirty", "loading", "loaded", "saving" ];
        for (b = 0, c = d; b < c; b++) a = d[b], e(a);
        e("saved", function() {
            return this();
        }), e = function(a, b) {
            var c;
            c = this[a];
            if (c !== b) {
                e(this, arguments), this(a, c);
                if (this() !== "dirty") return this();
            }
        }, e("dirtyKeys", {
            get: function() {
                return this;
            }
        }), e = function() {
            return "" + this + ": " + this();
        }, e = function() {
            var a, b;
            b = {}, a = this("encoders"), !!a && !a() && a(__bind(function(a, c) {
                var d, e;
                e = this(a);
                if (!$undef(e)) {
                    d = c(this(a));
                    if (!$undef(d)) return b[a] = d;
                }
            }, this));
            return b;
        }, e = function(a) {
            var b, c, d, e;
            d = {}, b = this("decoders");
            if (!b || b()) for (c in a) e = a[c], d[helpers(c, !0)] = e; else b(function(b, c) {
                return d[b] = c(a[b]);
            });
            return this(d);
        }, e = e(function() {
            this();
            return !0;
        }), e = e(function() {
            this();
            return !0;
        }), e = e(function() {}), e = e(function() {}), e = e(function() {
            this();
            return !0;
        }), e = e(function() {
            this();
            return !0;
        }), e = e(function() {}), e = e(function() {}), e = function(a) {
            var b, c, d, e, f, g, h, i, j;
            this(), b = __bind(function() {
                a != null && a(this);
                return this();
            }, this), c = this("storage"), d = !c;
            for (g = 0, i = c; g < i; g++) {
                f = c[g], d = d || !f;
                for (h = 0, j = f; h < j; h++) e = f[h], e(this, b);
            }
            if (d) return b();
        }, e = function(a) {
            var b, c, d, e, f, g, h, i, j, k;
            if (!!this()) {
                this(), d = this(), d && this(), b = __bind(function() {
                    this(), a != null && a != null && a != null && a(this), d && this();
                    return this();
                }, this), c = this("storage"), e = !c;
                for (h = 0, j = c; h < j; h++) {
                    g = c[h], e = e || !g;
                    for (i = 0, k = g; i < k; i++) f = g[i], f(this, b);
                }
                if (e) return b();
            }
        }, e = function() {
            var a, b, c, d, e, f, g, h, i, j, k;
            this(), a = !1, j = this("validators") || [];
            for (f = 0, h = j; f < h; f++) {
                e = j[f], d = e, k = e;
                for (g = 0, i = k; g < i; g++) b = k[g], c = new Batman(this), d ? d(c, this, b, this(b)) : e(c, this, b, this(b)), c ? (this("afterValidation"), c(__bind(function() {
                    this("afterValidation");
                    return this();
                }, this)), a = !0) : c && c();
            }
            return a ? !1 : this();
        }, e = function() {
            return !this();
        }, e = function() {
            this();
            if (this() === !1) return !1;
            return this();
        };
        return e;
    }(), Batman = function() {
        function a(a) {
            this = a, this = !0;
        }
        __extends(a, Batman), a = function(a) {
            this(a);
            return this = !1;
        }, a = function() {
            this = !0;
            return this = !1;
        }, a = a(function() {
            this = !1;
            return !0;
        }), a = function() {
            return this = !1;
        };
        return a;
    }(), Batman = function() {
        function a() {
            var b, c;
            c = arguments[0], b = 2 <= arguments ? __slice(arguments, 1) : [], this = c, a(this, b);
        }
        __extends(a, Batman), a = function(a) {
            throw "You must override validate in Batman.Validator subclasses.";
        }, a = function() {
            return helpers(this)("_validator", "");
        }, a = function() {
            return this();
        }, a = function() {
            var a;
            a = 1 <= arguments ? __slice(arguments, 0) : [], Batman(this);
            return this ? this(a) : this = a;
        }, a = function(a) {
            var b, c, d, e, f, g;
            c = {}, d = !1;
            for (b in a) e = a[b], ~((f = this) != null ? (g = f) != null ? g(b) : void 0 : void 0) && (c[b] = e, d = !0);
            if (d) return c;
        };
        return a;
    }(), Validators = Batman = [ Batman = function() {
        function a(b) {
            var c;
            if (c = b || b) b = c[0], b = c[1] || -1, delete b, delete b;
            a(this, arguments);
        }
        __extends(a, Batman), a("minLength", "maxLength", "length", "lengthWithin", "lengthIn"), a = function(a, b, c, d) {
            var e;
            e = this, e && d < e && a("" + c + " must be at least " + e + " characters"), e && d > e && a("" + c + " must be less than " + e + " characters");
            if (e && d !== e) return a("" + c + " must be " + e + " characters");
        };
        return a;
    }(), Batman = function() {
        function a() {
            a(this, arguments);
        }
        __extends(a, Batman), a("presence"), a = function(a, b, c, d) {
            var e;
            e = this;
            if (e && d == null) return a("" + c + " must be present");
        };
        return a;
    }() ], Batman = function() {
        function a(a) {
            this = a, this = helpers(helpers(this));
        }
        a = !0;
        return a;
    }(), Batman = function() {
        function a() {
            var b;
            if (b = !1, __indexOf(window, b) >= 0) return null;
            this = 0, a(this, arguments);
        }
        __extends(a, Batman), a = function(a, b) {
            var c, d;
            d = this, c = a() || a(++this), d && c && (localStorage[d + c] = JSON(a));
            return b();
        }, a = function(a, b) {
            var c, d, e;
            e = this, c = a(), e && c && (d = localStorage[e + c]), a(JSON(d));
            return b();
        }, a = function(a, b) {
            var c, d, e, f, g;
            e = new RegExp("$" + this);
            for (d in localStorage) g = localStorage[d], e(d) && (c = JSON(g), f = new a(-1), f(c));
            b();
        };
        return a;
    }(), Batman = function() {
        function a() {
            a(this, arguments);
        }
        __extends(a, Batman), a = function(a) {
            var b, c;
            b = {
                type: "json"
            }, b = (a != null ? typeof a == "function" ? a() : void 0 : void 0) || (a != null ? a : void 0) || (typeof (c = this) == "function" ? c() : void 0) || this || this, a && !a && (b += "/" + a());
            return b;
        }, a = function(a, b) {
            var c;
            c = $mixin(this(a), {
                method: a() ? "put" : "post",
                data: JSON(a),
                success: function() {
                    return b();
                },
                error: function(a) {
                    return b(a);
                }
            });
            return new Batman(c);
        }, a = function(a, b) {
            var c;
            c = $mixin(this(a), {
                success: function(c) {
                    var d;
                    typeof c == "string" && (c = JSON(c));
                    for (d in c) {
                        c = c[d];
                        break;
                    }
                    a(c);
                    return b();
                }
            });
            return new Batman(c);
        }, a = function(a, b) {
            var c;
            c = $mixin(this(), {
                success: function(c) {
                    var d, e, f, g, h;
                    typeof c == "string" && (c = JSON(c));
                    if (!Array(c)) for (d in c) {
                        c = c[d];
                        break;
                    }
                    for (g = 0, h = c; g < h; g++) e = c[g], f = new a("" + e[a]), f(e);
                    b();
                }
            });
            return new Batman(c);
        };
        return a;
    }(), Batman = function() {
        function b() {
            b(this, arguments);
        }
        var a;
        __extends(b, Batman), a = {}, b = "", b = "", b = null, b = null, b = null, b = null, b = b(function() {}), b = "views", b("source", function() {
            return setTimeout(__bind(function() {
                return this();
            }, this), 0);
        }), b = function() {
            var b;
            b = this("source");
            if (!!b) return a[b] ? this("html", a[b]) : new Batman({
                url: "views/" + this,
                type: "html",
                success: __bind(function(c) {
                    a[b] = c;
                    return this("html", c);
                }, this),
                error: function(a) {
                    throw "Could not load view from " + url;
                }
            });
        }, b("html", function(a) {
            var b;
            b = this || document("div"), b = a;
            if (this !== b) return this("node", b);
        }), b("node", function(a) {
            if (!!a) {
                this = !1, this && this();
                if (a) {
                    this = new Batman(a, __bind(function() {
                        var b, c;
                        b = this, typeof b == "string" && (this = (c = Batman) != null ? c[b] : void 0), this && a && (this = "", this(a));
                        return this(a);
                    }, this), this), this && this(this);
                    return this("view", this);
                }
            }
        });
        return b;
    }(), Batman = function() {
        function b(a, c, d) {
            this = a, this = c, d == null && (d = []), this = __bind(this, this), this = __bind(this, this), b(this, arguments), this = d instanceof RenderContext ? d : function(a, b, c) {
                c = a;
                var d = new c, e = a(d, b);
                return typeof e == "object" ? e : d;
            }(RenderContext, d, function() {}), setTimeout(this, 0);
        }
        var a;
        __extends(b, Batman), b = function() {
            this = new Date;
            return this(this);
        }, b = function() {
            this = new Date;
            return this(this);
        }, b = function() {
            this = null;
            return typeof this == "function" ? this() : void 0;
        }, b = function() {}, a = /data\-(.*)/, b = function(b) {
            var c, d, e, f, g, h, i, j, k, l, m, n, o;
            if (new Date - this > 50) this = b, setTimeout(this, 0); else {
                if (b) {
                    this("node", b), n = b;
                    for (k = 0, l = n; k < l; k++) {
                        c = n[k], e = (o = c(a)) != null ? o[1] : void 0;
                        if (!e) continue;
                        g = (d = e("-")) === -1 ? typeof (i = Batman)[e] == "function" ? i[e](b, c, this, this) : void 0 : typeof (j = Batman)[m = e(0, d)] == "function" ? j[m](b, e(d + 1), c, this, this) : void 0;
                        if (g === !1) {
                            h = !0;
                            break;
                        }
                    }
                }
                return (f = this(b, h)) ? this(f) : this();
            }
        }, b = function(a, b) {
            var c, d, e, f;
            if (!b) {
                c = a;
                if (c != null ? c : void 0) return c[0];
            }
            typeof a == "function" && a(), f = a;
            if (f) return f;
            d = a;
            while (d = d) {
                typeof d == "function" && d(), e = d;
                if (e) return e;
            }
        };
        return b;
    }(), Binding = function() {
        function c() {
            var a;
            c(this, arguments), this(), a = !0, Batman(this) && Batman(this, __bind(function() {
                a = !1, this ? this(this, this || this, this) : this && this("keyContext")(this, this);
                return a = !0;
            }, this)), this("filteredValue", !0, __bind(function(b) {
                if (a) return this ? this(b, this, this) : Batman(this, b);
            }, this)), this;
        }
        var a, b;
        __extends(c, Batman), b = /(?:^|,)\s*(?!(?:true|false)\s*(?:$|,))([a-zA-Z][\w\.]*)\s*(?:$|,)/, a = /(\w)\[(.+?)\]/, c("filteredValue", {
            get: function() {
                var a;
                a = this("unfilteredValue");
                return this > 0 ? this(__bind(function(a, b, c) {
                    var d;
                    d = this[c](function(a) {
                        return a ? a(a) : a;
                    });
                    return b(null, [ a ](__slice(d)));
                }, this), a) : a;
            }
        }), c("unfilteredValue", {
            get: function() {
                return this("key") ? this("keyContext." + this("key")) : this("value");
            }
        }), c("keyContext", {
            get: function() {
                var a, b;
                this || (b = this(this), a = b[0], this = b[1]);
                return this;
            }
        }), c = function() {
            var b, c, d, e, f, g, h, i;
            this = [], this = [], f = this(a, "$1 | get $2 ")(/'/g, '"')(/(?!")\s+\|\s+(?!")/);
            try {
                g = this(h = f())[0];
            } catch (j) {
                throw 'Bad binding keypath "' + h + '"!';
            }
            g ? this = g : this = g;
            if (f) {
                while (e = f()) {
                    i = e(" "), ~i ? (d = e(0, i), b = e(i)) : d = e;
                    if (!(c = Batman[d])) throw new Error("Unrecognized filter " + c + ' in key "' + this + '"!');
                    this(c);
                    if (b) try {
                        this(this(b));
                    } catch (j) {
                        throw new Error('Bad filter arguments "' + b + '"!');
                    } else this([]);
                }
                return this = this(__bind(function(a) {
                    return a(__bind(function(a) {
                        var b, c;
                        a && (c = this(a), b = c[0], a = c[1]);
                        return a;
                    }, this));
                }, this));
            }
        }, c = function(a) {
            return JSON("[" + a(b, '{"_keypath": "$1"}') + "]");
        };
        return c;
    }(), RenderContext = function() {
        function b() {
            var a;
            a = 1 <= arguments ? __slice(arguments, 0) : [], this = a, this = new Batman, this(this);
        }
        var a;
        b = function(a) {
            var b, c, d, e;
            b = a(".")[0]("|")[0](), d = this;
            while (d--) {
                c = this[d], c != null ? e = c(b) : e = c[b];
                if (!$undef(e)) return [ $get(c, a), c ];
            }
            return [ container(a), container ];
        }, b = function() {
            var a, b;
            a = 1 <= arguments ? __slice(arguments, 0) : [];
            return (b = this)(b, a);
        }, b = function(a) {
            return this(a);
        }, b = function() {
            return this();
        }, b = function() {
            var a;
            a = function(a, b, c) {
                c = a;
                var d = new c, e = a(d, b);
                return typeof e == "object" ? e : d;
            }(this, this, function() {}), a(this);
            return a;
        }, b = function(a) {
            this(this(this), 1), this(a);
            return a;
        }, a = function() {
            function a(a, b) {
                this = a, this = b, this ? this(this, {
                    get: function() {
                        return this("filteredValue");
                    }
                }) : this({
                    get: function(a) {
                        return this("filteredValue." + a);
                    }
                });
            }
            __extends(a, Batman), a = !0;
            return a;
        }(), b = function(b, c, d) {
            this(b, c, __bind(function(b, c, e) {
                return this(new a(e, d));
            }, this), function() {
                return !0;
            });
            return b = __bind(function() {
                return this();
            }, this);
        }, b = function(a, b, c, d) {
            return new Binding({
                renderContext: this,
                keyPath: b,
                node: a,
                dataChange: c,
                nodeChange: d
            });
        };
        return b;
    }(), Batman = {
        readers: {
            bind: function(a, b, c) {
                return a() === "input" && a("type") === "checkbox" ? Batman(a, "checked", b, c) : c(a, b);
            },
            context: function(a, b, c) {
                return c(a, b);
            },
            mixin: function(a, b, c) {
                c(Batman), c(a, b, function(b) {
                    return $mixin(a, b);
                }, function() {});
                return c();
            },
            showif: function(a, b, c, d, e) {
                var f;
                f = a;
                if (!f || f === "none") f = "block";
                return c(a, b, function(b) {
                    return !!b == !e ? typeof a == "function" ? a() : a = f : typeof a == "function" ? a() : a = "none";
                }, function() {});
            },
            hideif: function() {
                var a, b;
                a = 1 <= arguments ? __slice(arguments, 0) : [];
                return (b = Batman)(b, __slice(a)([ !0 ]));
            },
            route: function(a, b, c) {
                var d, e, f, g, h, i, j;
                b(0, 1) === "/" ? (h = Batman(Batman, b), i = b) : (g = b("#")) !== -1 ? (e = helpers(b(0, g)) + "Controller", d = c(e), h = d != null ? d()[b(g + 1)] : void 0, i = h != null ? h : void 0) : (h = c(b), h instanceof Batman ? (e = helpers(helpers(b)) + "Controller", d = c(e)(), f = h(), h = (j = d) != null ? j(d, {
                    id: f
                }) : void 0, i = "/" + helpers(b) + "/" + f) : i = h), a() === "A" && (a = Batman + (i || ""));
                return Batman(a, function() {
                    return typeof h == "function" ? h() : void 0;
                });
            },
            partial: function(a, b, c) {
                var d;
                return d = new Batman({
                    source: b + ".html",
                    contentFor: a,
                    contexts: Array(c)
                });
            },
            yield: function(a, b) {
                return setTimeout(function() {
                    return Batman(b, a);
                }, 0);
            },
            contentfor: function(a, b) {
                return setTimeout(function() {
                    return Batman(b, a);
                }, 0);
            }
        },
        attrReaders: {
            _parseAttribute: function(a) {
                a === "false" && (a = !1), a === "true" && (a = !0);
                return a;
            },
            bind: function(a, b, c, d) {
                var e, f;
                switch (b) {
                  case "checked":
                    e = function(b) {
                        return a = !!b;
                    }, f = function(a, b) {
                        return b(c, Batman(a));
                    };
                    break;
                  case "value":
                    e = function(b) {
                        return a = b;
                    }, f = function(a, b) {
                        return b(c, Batman(a));
                    };
                    break;
                  default:
                    e = function(c) {
                        return a(b, c);
                    }, f = function(a, d) {
                        return d(c, Batman(a(b)));
                    };
                }
                return d(a, c, e, f);
            },
            context: function(a, b, c, d) {
                return d(a, c, b);
            },
            event: function(a, b, c, d) {
                var e, f, g;
                c(0, 1) === "@" ? e = new Function(c(1)) : (g = d(c), e = g[0], f = g[1]);
                return Batman[b](a, function() {
                    var b;
                    b = a("data-confirm");
                    if (!b || !!confirm(b)) return e != null ? e(f, arguments) : void 0;
                });
            },
            addclass: function(a, b, c, d, e, f) {
                b = b(/\|/g, " ");
                return d(a, c, function(c) {
                    var d, e;
                    d = a, e = d(b) !== -1;
                    if (!!c == !f) {
                        if (!e) return a = "" + d + " " + b;
                    } else if (e) return a = d(b, "");
                }, function() {});
            },
            removeclass: function() {
                var a, b;
                a = 1 <= arguments ? __slice(arguments, 0) : [];
                return (b = Batman)(b, __slice(a)([ !0 ]));
            },
            foreach: function(a, b, c, d, e) {
                var f, g, h, i, j, k;
                i = a(!0), i("data-foreach-" + b), h = a, k = a, setTimeout(function() {
                    if (a != null) return h(a);
                }, 0), g = new Batman, f = function(a) {
                    var c, f, j, l;
                    $typeOf(a) === "Array" && (a = a[0]), j = i(!0), g(a, j), f = d(), c = new Batman, c[b] = a, f(c), f(a), e("ready");
                    return l = new Batman(j, function() {
                        h(j, k);
                        return e("ready");
                    }, f);
                }, j = function(a) {
                    var b, c;
                    b = g(a);
                    return b != null ? (c = b) != null ? c(b) : void 0 : void 0;
                }, d(a, c, function(a) {
                    var b, c, d;
                    if (a != null ? a : void 0) a("add", f), a("remove", j), a("sort", function() {
                        a(j);
                        return setTimeout(function() {
                            return a(f);
                        }, 0);
                    });
                    if (a) return a(function(a, b) {
                        return f(b != null ? b : a);
                    });
                    if (a) return a(function(a) {
                        return f(a);
                    });
                    d = [];
                    for (b in a) c = a[b], d(f(c));
                    return d;
                }, function() {});
                return !1;
            },
            formfor: function(a, b, c, d) {
                var e;
                e = d(a, c, b);
                return Batman(a, function(a) {
                    return a();
                });
            }
        },
        events: {
            click: function(a, b) {
                Batman(a, "click", function(c) {
                    b(a, c);
                    return c();
                }), a() === "A" && !a && (a = "#");
                return a;
            },
            change: function(a, b) {
                var c, d, e, f, g;
                d = function() {
                    switch (a()) {
                      case "TEXTAREA":
                        return [ "keyup", "change" ];
                      case "INPUT":
                        if (a() === "TEXT") {
                            e = b, b = function(a) {
                                var b;
                                if (!(a === "keyup" && 13 <= (b = a) && b <= 14)) return e(null, arguments);
                            };
                            return [ "keyup", "change" ];
                        }
                        return [ "change" ];
                      default:
                        return [ "change" ];
                    }
                }();
                for (f = 0, g = d; f < g; f++) c = d[f], Batman(a, c, function(c) {
                    return b(a, c);
                });
                return a;
            },
            submit: function(a, b) {
                Batman(a) ? Batman(a, "keyup", function(c) {
                    if (c === 13) {
                        b(a, c);
                        return c();
                    }
                }) : Batman(a, "submit", function(c) {
                    b(a, c);
                    return c();
                });
                return a;
            }
        },
        yield: function(a, b) {
            var c, d, e, f;
            d = (e = Batman) || (e = {}), d[a] = b;
            if (c = (f = Batman) != null ? f[a] : void 0) {
                b = "";
                if (c) return b(c);
            }
        },
        contentFor: function(a, b) {
            var c, d, e, f;
            c = (e = Batman) || (e = {}), c[a] = b;
            if (d = (f = Batman) != null ? f[a] : void 0) {
                d = "";
                if (b) return d(b);
            }
        },
        valueForNode: function(a, b) {
            var c;
            c = arguments > 1;
            switch (a()) {
              case "INPUT":
                return c ? a = b : a;
              default:
                return c ? a = b : a;
            }
        },
        nodeIsEditable: function(a) {
            var b;
            return (b = a()) === "INPUT" || b === "TEXTAREA";
        },
        addEventListener: function(a, b, c) {
            return a ? a(b, c, !1) : a("on" + b, c);
        }
    }, camelize_rx = /(?:^|_)(.)/g, capitalize_rx = /(^|\s)([a-z])/g, underscore_rx1 = /([A-Z]+)([A-Z][a-z])/g, underscore_rx2 = /([a-z\d])([A-Z])/g, helpers = Batman = {
        camelize: function(a, b) {
            a = a(camelize_rx, function(a, b) {
                return b();
            });
            return b ? a(0, 1)() + a(1) : a;
        },
        underscore: function(a) {
            return a(underscore_rx1, "$1_$2")(underscore_rx2, "$1_$2")("-", "_")();
        },
        singularize: function(a) {
            return a(-3) === "ies" ? a(0, a - 3) + "y" : a(-1) === "s" ? a(0, a - 1) : a;
        },
        pluralize: function(a, b) {
            var c;
            if (b) {
                if (a === 1) return b;
            } else b = a;
            c = b(-1);
            return c === "y" ? "" + b(0, b - 1) + "ies" : c === "s" ? b : "" + b + "s";
        },
        capitalize: function(a) {
            return a(capitalize_rx, function(a, b, c) {
                return b + c();
            });
        }
    }, buntUndefined = function(a) {
        return function(b) {
            if (!$undef(b)) return a(this, arguments);
        };
    }, filters = Batman = {
        get: buntUndefined(function(a, b) {
            return a != null ? a(b) : a[b];
        }),
        truncate: buntUndefined(function(a, b, c) {
            c == null && (c = "..."), a > b && (a = a(0, b - c) + c);
            return a;
        }),
        "default": function(a, b) {
            return a || b;
        },
        prepend: function(a, b) {
            return b + a;
        },
        append: function(a, b) {
            return a + b;
        },
        downcase: buntUndefined(function(a) {
            return a();
        }),
        upcase: buntUndefined(function(a) {
            return a();
        }),
        pluralize: buntUndefined(function(a, b) {
            return helpers(b, a);
        }),
        join: buntUndefined(function(a, b) {
            b == null && (b = "");
            return a(b);
        }),
        sort: buntUndefined(function(a) {
            return a();
        }),
        map: buntUndefined(function(a, b) {
            return a(function(a) {
                return a[b];
            });
        }),
        first: buntUndefined(function(a) {
            return a[0];
        })
    }, _ref2 = [ "capitalize", "singularize", "underscore", "camelize" ];
    for (_j = 0, _len2 = _ref2; _j < _len2; _j++) k = _ref2[_j], filters[k] = buntUndefined(helpers[k]);
    mixins = Batman = new Batman, container = typeof exports != "undefined" && exports !== null ? (module = Batman, global) : (window = Batman, window), $mixin(container, Batman), Batman = function(a) {
        var b, c, d, e;
        e = [ "mixin", "unmixin", "route", "redirect", "event", "eventOneShot", "typeOf" ];
        for (c = 0, d = e; c < d; c++) b = e[c], a["$" + b] = Batman[b];
        return a;
    }, Batman = function() {
        return Batman(container);
    }, !function(window) {
        function readyState(a, b, c) {
            return function() {
                a && a == 4 && (twoHundo(a) ? b(a) : c(a));
            };
        }
        function setHeaders(a, b) {
            var c = b || {};
            c = "text/javascript, text/html, application/xml, text/xml, */*", c["X-Requested-With"] = c["X-Requested-With"] || "XMLHttpRequest";
            if (b) {
                c["Content-type"] = "application/x-www-form-urlencoded";
                for (var d in c) c(d) && a(d, c[d], !1);
            }
        }
        function getCallbackName(a) {
            var b = a || "callback";
            if (a(-(b + 2)) == b + "=?") {
                var c = "reqwest_" + uniqid++;
                a = a(0, a - 1) + c;
                return c;
            }
            var d = new RegExp(b + "=([\\w]+)");
            return a(d)[1];
        }
        function getRequest(a, b, c) {
            if (a != "jsonp") {
                var d = xhr();
                d(a || "GET", typeof a == "string" ? a : a, !0), setHeaders(d, a), d = readyState(d, b, c), a && a(d), d(a || null);
                return d;
            }
            var e = doc("script"), f = getCallbackName(a);
            window[f] = function(b) {
                a && a(b);
            }, e = "text/javascript", e = a, e = !0, e = function() {
                head(e), delete window[f];
            }, head(e, topScript);
        }
        function Reqwest(a, b) {
            this = a, this = b, init(this, arguments);
        }
        function setType(a) {
            if (/\.json$/(a)) return "json";
            if (/\.jsonp$/(a)) return "jsonp";
            if (/\.js$/(a)) return "js";
            if (/\.html?$/(a)) return "html";
            if (/\.xml$/(a)) return "xml";
            return "js";
        }
        function init(o, fn) {
            function complete(a) {
                o && o(a);
            }
            function success(resp) {
                o && clearTimeout(self) && (self = null);
                var r = resp;
                switch (type) {
                  case "json":
                    resp = eval("(" + r + ")");
                    break;
                  case "js":
                    resp = eval(r);
                    break;
                  case "html":
                    resp = r;
                }
                fn(resp), o && o(resp), complete(resp);
            }
            function error(a) {
                o && o(a), complete(a);
            }
            this = typeof o == "string" ? o : o, this = null;
            var type = o || setType(this), self = this;
            fn = fn || function() {}, o && (this = setTimeout(function() {
                self(), error();
            }, o)), this = getRequest(o, success, error);
        }
        function reqwest(a, b) {
            return new Reqwest(a, b);
        }
        function enc(a) {
            return encodeURIComponent(a);
        }
        function serial(a) {
            var b = a;
            if (a || !b) return "";
            b = enc(b);
            switch (a()) {
              case "input":
                switch (a) {
                  case "reset":
                  case "button":
                  case "image":
                  case "file":
                    return "";
                  case "checkbox":
                  case "radio":
                    return a ? b + "=" + (a ? enc(a) : !0) + "&" : "";
                  default:
                    return b + "=" + (a ? enc(a) : !0) + "&";
                }
                break;
              case "textarea":
                return b + "=" + enc(a) + "&";
              case "select":
                return b + "=" + enc(a[a]) + "&";
            }
            return "";
        }
        var twoHundo = /^20\d$/, doc = document, byTag = "getElementsByTagName", topScript = doc[byTag]("script")[0], head = topScript, xhr = "XMLHttpRequest" in window ? function() {
            return new XMLHttpRequest;
        } : function() {
            return new ActiveXObject("Microsoft.XMLHTTP");
        }, uniqid = 0;
        Reqwest = {
            abort: function() {
                this();
            },
            retry: function() {
                init(this, this, this);
            }
        }, reqwest = function(a) {
            var b = a[byTag]("input"), c = a[byTag]("select"), d = a[byTag]("textarea");
            return (v(b)()()(serial)()("") + v(c)()()(serial)()("") + v(d)()()(serial)()(""))(/&$/, "");
        }, reqwest = function(a) {
            for (var b = this(a)("&"), c = 0, d = b, e = [], f; c < d; c++) b[c] && (f = b[c]("=")) && e({
                name: f[0],
                value: f[1]
            });
            return e;
        };
        var old = window;
        reqwest = function() {
            window = old;
            return this;
        }, window = reqwest;
    }(this), (typeof exports != "undefined" && exports !== null ? exports : this) = typeof window != "undefined" && window !== null ? window : reqwest, Batman = function(a) {
        this(!0);
        return reqwest({
            url: this("url"),
            method: this("method"),
            type: this("type"),
            data: a || this("data"),
            success: __bind(function(a) {
                this("response", a);
                return this(a);
            }, this),
            failure: __bind(function(a) {
                this("response", a);
                return this(a);
            }, this),
            complete: __bind(function() {
                this(!1);
                return this(!0);
            }, this)
        });
    };
})(this);